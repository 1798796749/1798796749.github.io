[{"id":"8c860e702e41ad422a6fe923d8248717","title":"搭建hexo-theme-aurora主题框架","content":"\n\n\n\n\n\n\n\n\n\n通过自己搭建 hexo-theme-aurora主题框架，下面是官方文档的部分说明\n1.官方文档说明​\t依赖环境 ​\n\nHexo 6.3+\nYarn or NPM installed\n\n步骤 1 - 安装主题包 ​在控制台中，进入 Hexo 项目的根目录，然后运行以下命令安装主题\nYARN \n1yarn add hexo-theme-aurora hexo-plugin-aurora\n\nNPM \n1npm install hexo-theme-aurora hexo-plugin-aurora --save\n\n\n\n步骤 2 - 生成主题配置 ​因为主题是使用 NPM 或者 Yarn 安装的，而不是 clone 到 themes 文件夹的。所以我们需要自己创建一个配置文件。你只需要在 Hexo 博客的根目录下创建一个 _config.aurora.yml 配置文件来配置主题。要获取默认主题模板，对于 Linux 系统 (MacOS&#x2F;LinuxOS) 用户只需执行以下命令。\n对于 Windows 用户，可以将下面的模板复制到 _config.aurora.yml 中。\n也可以直接复制这个模版到项目根目录的 _config.aurora.yml 中\n步骤 3 - 配置 theme​因为要告诉 hexo 你要用的主题是 aurora 所以需要把 _config.yml 中的 theme 值改为 aurora\n\n打开在 Hexo 根目录下的 _config.yml\n修改把 theme 的值改为 aurora\n\nyml\n1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: aurora\n\n1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: aurora\n\n步骤 4 - 设置 permalink​因为使用了 Vue-router，Hexo 默认生成的页面和文章的 permalink 与我们 Vue router 中的 path 是不相符的，那么就会出现无法访问的问题。\n所以我们需要修改 Hexo 默认配置文件里面的 permalink 参数。\n\n打开在 Hexo 根目录下的 _config.yml\n修改 permalink 参数为 /post/:title.html\n\nyaml\n12345678# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://tridiamond.techpermalink: /post/:title.htmlpermalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks\n\n\n步骤 5 - 设置代码高亮 ​\n\n\n\n\n\n\n\n\n主题 2.5 版本开始主题已经改为使用 Shiki 作为代码高亮引擎。Shiki支持使用从 VSCode 导出的主题。颜色标记化与 VSCode 相同! Shiki 默认还支持了一些最多人使用的主题哦！\n首先，我们需要禁用 _config.yml 中的 highlight 和 prismjs 。\nyaml\n1234highlight:  enable: falseprismjs:  enable: false\n\n\n然后将以下配置添加到主题配置文件 _config.aurora.yml 中\nyaml\n123456#! ---------------------------------------------------------------#! Highlighter Shiki#! ---------------------------------------------------------------shiki:  enable: true  backgroundColor: &#x27;#1a1a1a&#x27;\n\n\n\n其实到上面得步骤官网文档已经结束了，下面是自己的配置\n2.自我配置1. Hexo 中图片上传问题在使用 Hexo 博客时，图片的管理和上传是常见问题之一。特别是当你使用 Typora 进行 Markdown 写作时，默认的图片插入方式无法被 Hexo 正确识别。下面是完整解决方案。\nTypora 设置在 Typora 中依次进入：文件 → 偏好设置 → 图像将「插入图片时」设置为：\n\n复制图片到指定路径  \n路径设置为：./source/images  \n插入图片时使用相对路径。\n\n这样，Typora 每次插入图片时都会自动保存到 Hexo 的 source/images 文件夹下。\n修改 Hexo 配置打开站点根目录下的 _config.yml，找到如下配置：\n1post_asset_folder: true\n\n2. 开发 Hexo 转换图片路径插件在使用 Typora 编辑 Hexo 文章时，插入的图片路径通常是相对路径，如：(../images/example.png)\n而这个转换我们需要在文章编译为html之前，在编译的过程中转换 –&gt; &#123;% asset_img example.jpg example %&#125;\n2.1 创建插件文件并实现逻辑要让 Hexo 自动修复 Typora 插入图片的路径，我们可以通过编写一个简单的自定义插件来实现。\n（1）创建插件目录在 Hexo 根目录下创建 hexo-asset-img 文件夹（如果已经存在，可以直接使用）：\n123mkdir hexo-asset-imgcd hexo-asset-imgnpm init\n\n\n2.2 测试与调试插件插件编写完成后，需要进行本地测试以确认逻辑是否生效、路径是否正确替换。\n创建index.js文件到根目录下面，复制代码到里面去\n12345678910111213141516171819202122232425262728293031const log = require(&#x27;hexo-log&#x27;)(&#123; &#x27;debug&#x27;: false, &#x27;slient&#x27;: false &#125;);/** * md文件返回 true * @param &#123;*&#125; data  */function ignore(data) &#123;    var source = data.source;    var ext = source.substring(source.lastIndexOf(&#x27;.&#x27;)).toLowerCase();    return [&#x27;md&#x27;,].indexOf(ext) &gt; -1;&#125;function action(data) &#123;    var reverseSource = data.source.split(&quot;&quot;).reverse().join(&quot;&quot;);    var fileName = reverseSource.substring(3, reverseSource.indexOf(&quot;/&quot;)).split(&quot;&quot;).reverse().join(&quot;&quot;);    // ![example](postname/example.jpg)  --&gt;  &#123;% asset_img example.jpg example %&#125;    var regExp = RegExp(&quot;!\\\\[(.*?)\\\\]\\\\(&quot; + fileName + &#x27;/(.+?)\\\\)&#x27;, &quot;g&quot;);    // hexo g    data.content = data.content.replace(regExp, &quot;&#123;% asset_img $2 $1 %&#125;&quot;,&quot;g&quot;);    // log.info(`hexo-asset-img: filename: $&#123;fileName&#125;, title: $&#123;data.title.trim()&#125;`);        return data;&#125;hexo.extend.filter.register(&#x27;before_post_render&#x27;,(data)=&gt;&#123;    if(!ignore(data))&#123;        action(data)    &#125;&#125;, 0);\n\n2.3 本地测试插件1.Hexo根目录下 package.json 中 dependencies 添加一行&quot;hexo-asset-img&quot;:&quot;^1.0.8&quot;\n2.将 hexo-asset-img 文件夹复制到 Hexo 根目录下 node modules 文件夹下\n\n\n\n\n\n\n\n注意\n二者缺一不可，不修改 package.json，没成功加载插件\n\n","slug":"page","date":"2025-10-24T01:44:56.000Z","categories_index":"","tags_index":"框架","author_index":"Azer"},{"id":"dabda493f1ef47db09fea0a07b798a65","title":"Hexo aurora 基础配置","content":"依赖环境 ​\nHexo 6.3+\nYarn or NPM installed\n\n安装指南 ​本节将帮助您在现有的 Hexo 博客项目上安装 Aurora 主题。\n步骤 1 - 安装主题包 ​在控制台中，进入 Hexo 项目的根目录，然后运行以下命令安装主题\nYARN NPM \n1yarn add hexo-theme-aurora hexo-plugin-aurora``yarn add hexo-theme-aurora hexo-plugin-aurora \n\nshell npm install hexo-theme-aurora hexo-plugin-aurora --save``npm install hexo-theme-aurora hexo-plugin-aurora --save\n步骤 2 - 生成主题配置 ​因为主题是使用 NPM 或者 Yarn 安装的，而不是 clone 到 themes 文件夹的。所以我们需要自己创建一个配置文件。你只需要在 Hexo 博客的根目录下创建一个 _config.aurora.yml 配置文件来配置主题。要获取默认主题模板，对于 Linux 系统 (MacOS&#x2F;LinuxOS) 用户只需执行以下命令。\n对于 Windows 用户，您可以将下面的模板复制到 _config.aurora.yml 中。\nLinux 复制模版命令\nshellcp -rf ./node_modules/hexo-theme-aurora/_config.yml ./_config.aurora.yml``cp -rf ./node_modules/hexo-theme-aurora/_config.yml ./_config.aurora.yml\n也可以直接复制这个模版到项目根目录的 _config.aurora.yml 中\n步骤 3 - 配置 theme​因为要告诉 hexo 你要用的主题是 aurora 所以需要把 _config.yml 中的 theme 值改为 aurora\n\n打开在 Hexo 根目录下的 _config.yml\n修改把 theme 的值改为 aurora\n\nyml\n1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: aurora\n\n1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: aurora\n\n步骤 4 - 设置 permalink​因为使用了 Vue-router，Hexo 默认生成的页面和文章的 permalink 与我们 Vue router 中的 path 是不相符的，那么就会出现无法访问的问题。\n所以我们需要修改 Hexo 默认配置文件里面的 permalink 参数。\n\n打开在 Hexo 根目录下的 _config.yml\n修改 permalink 参数为 /post/:title.html\n\nyaml\n12345678# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://tridiamond.techpermalink: /post/:title.htmlpermalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks\n\n12345678# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://tridiamond.techpermalink: /post/:title.htmlpermalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks\n\n步骤 5 - 设置代码高亮 ​\n\n\n\n\n\n\n\n\n主题 2.5 版本开始主题已经改为使用 Shiki 作为代码高亮引擎。Shiki支持使用从 VSCode 导出的主题。颜色标记化与 VSCode 相同! Shiki 默认还支持了一些最多人使用的主题哦！\n首先，我们需要禁用 _config.yml 中的 highlight 和 prismjs 。\nyaml\n1234highlight:  enable: falseprismjs:  enable: false\n\n1234highlight:  enable: falseprismjs:  enable: false\n\n然后将以下配置添加到主题配置文件 _config.aurora.yml 中\nyaml\n123456#! ---------------------------------------------------------------#! Highlighter Shiki#! ---------------------------------------------------------------shiki:  enable: true  backgroundColor: &#x27;#1a1a1a&#x27;\n\n123456#! ---------------------------------------------------------------#! Highlighter Shiki#! ---------------------------------------------------------------shiki:  enable: true  backgroundColor: &#x27;#1a1a1a&#x27;\n\n高级使用\n更多高级代码高亮配置请查看这里\n步骤 6 - 创建 “关于 (about)” 页面 ​主题默认开启了 about 页面，所以我们需要创建这个 about 页，要不主题就无法正常显示 about 页。\n要创建这个默认的 about 页，只需要执行这个 Hexo 的命令：\nshellhexo new page about``hexo new page about\n执行完毕后，你会发现在 source/ 文件中多处了一个新的文件夹：\nshell\n1234.└── source    └── about        └── index.md\n\n1234.└── source    └── about        └── index.md\n\n你可以随意修改这个 index.md markdown 文件中的内容，此文件的内容将会现在在我们的 about 页面中。\n步骤 7 - 重新生成与本地服务器 ​\n\n\n\n\n\n\n\n\n使用以下命令来运行本地环境。\nshellhexo clean &amp; hexo g &amp; hexo server``hexo clean &amp; hexo g &amp; hexo server\nTIP\n改变了任何配置都需要重新生成 Hexo 的静态文件！\n当文件都生成完毕之后，就可以通过 localhost:4000 访问你的博客了。\n接下来该干啥？ ​你的主题基本上是可以使用了，但是还有两个地方你需要去看看并且进行详细的配置:\n\n配置你的 Page（页面）\n高级配置文档\n\n","slug":"hello-world","date":"2025-10-22T05:21:08.000Z","categories_index":"","tags_index":"","author_index":"Azer"}]